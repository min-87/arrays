<?php
/*
Поиск пересечения двух неотсортированных массивов, операция в рамках которой выполняется вложенный цикл с полной поверкой каждого элемента первого массива, на вхождение во второй. Сложность данного алгоритма O(nm) (проивезедение n и m), где n и m размерности массивов. Если массивы отсортированы, то можно реализовать алгоритм сложно которого уже O(n + m), что значительно лучше. Суть алгоритма довольно проста. В коде вводятся два указателя (индекса) на каждый из массивов. Начальное значение каждого указателя 0. Затем идет проверка элементов находящихся под этими индексами в обоих массивах. Если они совпадают то значение заносится в результирующий массив, а оба индекса инкрементируются, если значение в первом массиве больше чем во втором, то инкрементируется указатель второго массива, иначе первого.
src\Arrays.php

Реализуйте функцию getIntersectionForSortedArray, которая находит пересечение двух отсортированных массивов.

<?php

getIntersectionOfSortedArray([10, 11, 24], [10, 13, 14, 18, 24, 30]);
// => [10, 24]
*/

namespace App\Arrays;

function getIntersectionOfSortedArray($arr1, $arr2)
{
    // BEGIN (write your solution here)
    $result = [];
    if ((sizeof($arr1) == 0) || (sizeof($arr2) == 0)) {
       return $result;
    }
    $i = 0;
    $j = 0;    
    do {        
        if ($arr1[$i] == $arr2[$j]) {  
            $result [] = $arr1[$i];
            $i ++;
            $j ++;
        } elseif ($arr1[$i] > $arr2[$j]) {            
            $j ++;
        } else {            
            $i ++;
        }
    } while ($i < sizeof($arr1) && $j < sizeof($arr2));    
    return $result;
    // END
}



